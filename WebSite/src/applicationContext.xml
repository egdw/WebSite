<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:component-scan base-package="com.*" />
	<!-- 从配置文件读取数据库信息 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="maxStatements" value="500" />
		<property name="loginTimeout" value="300" />
		<property name="initialPoolSize" value="5"></property>
		<property name="checkoutTimeout" value="1000" />
		<property name="testConnectionOnCheckin" value="true"></property>
		<property name="idleConnectionTestPeriod" value="60"></property>
	</bean>

	<!-- sqlSessionFactory 创建工厂对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 自动扫描Mapper的配置文件,不用去mybatis配置文件中进行设置了 -->
		<property name="mapperLocations" value="classpath:com/website/mapper/*Mapper.xml" />
		<!-- 自动设置对应的Mapper对象名称 比如com.Dog 可以写成Dog -->
		<property name="typeAliasesPackage" value="com.website.entites" />
	</bean>

	<!-- 开启注解注释 -->
	<context:annotation-config />
	<mvc:annotation-driven />
	<!-- 开启默认处理器 -->
	<mvc:default-servlet-handler />

	<!-- 试图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 这个是自动扫描对应包下面的mapper对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.website.mapper" />
	</bean>

	<!-- 自定义的Realm,进行一些权限用户的拦截 -->
	<bean id="AuthUsernameAndPasswordRealm" class="com.website.realm.AuthUsernameAndPasswordRealm"></bean>

	<!-- 核心,安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 传入相应的realm,如果有多个realm,那么久需要<Realms>标签 -->
		<property name="realm" ref="AuthUsernameAndPasswordRealm" />
	</bean>

	<!-- 不太清楚,但是应该都是必须要配(好像叫生命周期处理器) -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启安全注解需要的bean -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<!-- 开启安全注解需要的bean -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


	<!-- shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="login/login.jsp" />
		<property name="successUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/images/** = anon
				/AboutMy/** = anon
				/js/** = anon
				/login/** = anon
				/project/MyProject.do = anon
				/WEB-INF/** =anon
				/index.jsp = anon
				/logout = anon
				/login/Login.do = anon
				/unauthorized.jsp = anon
				/login.jsp = anon
				/*.jar = anon
				# everything else requires authentication:
				/** = authc
			</value>
		</property>
	</bean>

</beans>